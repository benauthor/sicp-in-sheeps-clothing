#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 5.2.1 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 28 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 33 #"(lib \"bullet-snip.ss\" \"browser\")\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 15 #"test-case-box%\0"
2 0 1 6 #"wxloc\0"
          0 0 56 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 10 #"Monospace\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 179 179 179 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 192 46 214 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 57 89 216 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 90 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 102 102 255 0 0 0 -1 -1 2
37 #"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 90 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 102 102 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 102 102 255 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 102 102 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 177 255 123 0 0 0 -1 -1 2
37 #"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 177 255 123 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 105 2 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 105 2 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
36 #"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
28 #"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
37 #"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
36 #"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 37
#"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 176 48 96 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 176 48 96 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1           0 1121 0 18 3 53
#";; Section 2.2.3 Sequences as Conventional Interfaces"
0 0 4 29 1 #"\n"
0 0 18 3 19 #";; this is awesome."
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 18 3 14 #";; we need map"
0 0 4 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 3 #"map"
0 0 4 3 1 #" "
0 0 14 3 4 #"proc"
0 0 4 3 1 #" "
0 0 14 3 5 #"items"
0 0 24 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 24 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 5 #"null?"
0 0 4 3 1 #" "
0 0 14 3 5 #"items"
0 0 24 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 14 3 3 #"nil"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 24 3 1 #"("
0 0 14 3 4 #"cons"
0 0 4 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 4 #"proc"
0 0 4 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 3 #"car"
0 0 4 3 1 #" "
0 0 14 3 5 #"items"
0 0 24 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 24 3 1 #"("
0 0 14 3 3 #"map"
0 0 4 3 1 #" "
0 0 14 3 4 #"proc"
0 0 4 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 4 3 1 #" "
0 0 14 3 5 #"items"
0 0 24 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 18 3 13 #";; and filter"
0 0 4 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 6 #"filter"
0 0 4 3 1 #" "
0 0 14 3 9 #"predicate"
0 0 4 3 1 #" "
0 0 16 3 8 #"sequence"
0 0 24 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 24 3 1 #"("
0 0 16 3 4 #"cond"
0 0 4 3 1 #" "
0 0 24 3 2 #"(("
0 0 14 3 5 #"null?"
0 0 4 3 1 #" "
0 0 16 3 8 #"sequence"
0 0 24 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 3 #"nil"
0 0 24 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 24 3 2 #"(("
0 0 14 3 9 #"predicate"
0 0 4 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 3 #"car"
0 0 4 3 1 #" "
0 0 16 3 8 #"sequence"
0 0 24 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 24 3 1 #"("
0 0 14 3 4 #"cons"
0 0 4 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 3 #"car"
0 0 4 3 1 #" "
0 0 16 3 8 #"sequence"
0 0 24 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 24 3 1 #"("
0 0 14 3 6 #"filter"
0 0 4 3 1 #" "
0 0 14 3 9 #"predicate"
0 0 4 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 4 3 1 #" "
0 0 16 3 8 #"sequence"
0 0 24 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 24 3 1 #"("
0 0 14 3 4 #"else"
0 0 4 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 6 #"filter"
0 0 4 3 1 #" "
0 0 14 3 9 #"predicate"
0 0 4 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 4 3 1 #" "
0 0 16 3 8 #"sequence"
0 0 24 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 18 3 17 #";; and accumulate"
0 0 4 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 10 #"accumulate"
0 0 4 3 1 #" "
0 0 14 3 2 #"op"
0 0 4 3 1 #" "
0 0 14 3 7 #"initial"
0 0 4 3 1 #" "
0 0 16 3 8 #"sequence"
0 0 24 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 24 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 5 #"null?"
0 0 4 3 1 #" "
0 0 16 3 8 #"sequence"
0 0 24 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 14 3 7 #"initial"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 24 3 1 #"("
0 0 14 3 2 #"op"
0 0 4 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 3 #"car"
0 0 4 3 1 #" "
0 0 16 3 8 #"sequence"
0 0 24 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 24 3 1 #"("
0 0 14 3 10 #"accumulate"
0 0 4 3 1 #" "
0 0 14 3 2 #"op"
0 0 4 3 1 #" "
0 0 14 3 7 #"initial"
0 0 4 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 4 3 1 #" "
0 0 16 3 8 #"sequence"
0 0 24 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 18 3 34 #";; then a couple ways to enumerate"
0 0 4 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 18 #"enumerate-interval"
0 0 4 3 1 #" "
0 0 14 3 3 #"low"
0 0 4 3 1 #" "
0 0 14 3 4 #"high"
0 0 24 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 24 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 1 #">"
0 0 4 3 1 #" "
0 0 14 3 3 #"low"
0 0 4 3 1 #" "
0 0 14 3 4 #"high"
0 0 24 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 14 3 3 #"nil"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 24 3 1 #"("
0 0 14 3 4 #"cons"
0 0 4 3 1 #" "
0 0 14 3 3 #"low"
0 0 4 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 18 #"enumerate-interval"
0 0 4 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 14 3 3 #"low"
0 0 4 3 1 #" "
0 0 22 3 1 #"1"
0 0 24 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 4 #"high"
0 0 24 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 14 #"enumerate-tree"
0 0 4 3 1 #" "
0 0 14 3 4 #"tree"
0 0 24 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 24 3 1 #"("
0 0 16 3 4 #"cond"
0 0 4 3 1 #" "
0 0 24 3 2 #"(("
0 0 14 3 5 #"null?"
0 0 4 3 1 #" "
0 0 14 3 4 #"tree"
0 0 24 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 3 #"nil"
0 0 24 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 24 3 2 #"(("
0 0 14 3 3 #"not"
0 0 4 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 5 #"pair?"
0 0 4 3 1 #" "
0 0 14 3 4 #"tree"
0 0 24 3 2 #"))"
0 0 4 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 14 3 4 #"tree"
0 0 24 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 24 3 1 #"("
0 0 14 3 4 #"else"
0 0 4 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 6 #"append"
0 0 4 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 14 #"enumerate-tree"
0 0 4 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 3 #"car"
0 0 4 3 1 #" "
0 0 14 3 4 #"tree"
0 0 24 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 22 #"                      "
0 0 24 3 1 #"("
0 0 14 3 14 #"enumerate-tree"
0 0 4 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 4 3 1 #" "
0 0 14 3 4 #"tree"
0 0 24 3 6 #"))))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 18 3 32 #";; try this out. sum odd squares"
0 0 4 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 6 #"square"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 4 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 1 #"*"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 15 #"sum-odd-squares"
0 0 4 3 1 #" "
0 0 14 3 4 #"tree"
0 0 24 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 24 3 1 #"("
0 0 14 3 10 #"accumulate"
0 0 4 3 1 #" "
0 0 14 3 1 #"+"
0 0 4 29 1 #"\n"
0 0 4 3 14 #"              "
0 0 22 3 1 #"0"
0 0 4 29 1 #"\n"
0 0 4 3 14 #"              "
0 0 24 3 1 #"("
0 0 14 3 3 #"map"
0 0 4 3 1 #" "
0 0 14 3 6 #"square"
0 0 4 29 1 #"\n"
0 0 4 3 19 #"                   "
0 0 24 3 1 #"("
0 0 14 3 6 #"filter"
0 0 4 3 1 #" "
0 0 14 3 4 #"odd?"
0 0 4 29 1 #"\n"
0 0 4 3 27 #"                           "
0 0 24 3 1 #"("
0 0 14 3 14 #"enumerate-tree"
0 0 4 3 1 #" "
0 0 14 3 4 #"tree"
0 0 24 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 3 #"fib"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 8 #"fib-iter"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 4 3 1 #" "
0 0 14 3 1 #"b"
0 0 4 3 1 #" "
0 0 14 3 5 #"count"
0 0 24 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 24 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 1 #"="
0 0 4 3 1 #" "
0 0 14 3 5 #"count"
0 0 4 3 1 #" "
0 0 22 3 1 #"0"
0 0 24 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 14 3 1 #"b"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 24 3 1 #"("
0 0 14 3 8 #"fib-iter"
0 0 4 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 4 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 4 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 14 3 5 #"count"
0 0 4 3 1 #" "
0 0 22 3 1 #"1"
0 0 24 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 24 3 1 #"("
0 0 14 3 8 #"fib-iter"
0 0 4 3 1 #" "
0 0 22 3 1 #"1"
0 0 4 3 1 #" "
0 0 22 3 1 #"0"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 9 #"even-fibs"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 24 3 1 #"("
0 0 14 3 10 #"accumulate"
0 0 4 3 1 #" "
0 0 14 3 4 #"cons"
0 0 4 29 1 #"\n"
0 0 4 3 14 #"              "
0 0 14 3 3 #"nil"
0 0 4 29 1 #"\n"
0 0 4 3 14 #"              "
0 0 24 3 1 #"("
0 0 14 3 6 #"filter"
0 0 4 3 1 #" "
0 0 14 3 5 #"even?"
0 0 4 29 1 #"\n"
0 0 4 3 22 #"                      "
0 0 24 3 1 #"("
0 0 14 3 3 #"map"
0 0 4 3 1 #" "
0 0 14 3 3 #"fib"
0 0 4 29 1 #"\n"
0 0 4 3 27 #"                           "
0 0 24 3 1 #"("
0 0 14 3 18 #"enumerate-interval"
0 0 4 3 1 #" "
0 0 22 3 1 #"0"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 18 3 16 #";; exercise 2.33"
0 0 4 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 3 #"map"
0 0 4 3 1 #" "
0 0 14 3 1 #"p"
0 0 4 3 1 #" "
0 0 16 3 8 #"sequence"
0 0 24 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 24 3 1 #"("
0 0 14 3 10 #"accumulate"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 24 3 1 #"("
0 0 16 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 24 3 1 #"("
0 0 14 3 4 #"cons"
0 0 4 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 1 #"p"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 2 #"))"
0 0 4 3 1 #" "
0 0 18 3 5 #";; op"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 14 3 3 #"nil"
0 0 4 3 1 #" "
0 0 18 3 10 #";; initial"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 16 3 8 #"sequence"
0 0 24 3 2 #"))"
0 0 4 3 1 #" "
0 0 18 3 11 #";; sequence"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 6 #"append"
0 0 4 3 1 #" "
0 0 14 3 4 #"seq1"
0 0 4 3 1 #" "
0 0 14 3 4 #"seq2"
0 0 24 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 24 3 1 #"("
0 0 14 3 10 #"accumulate"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 14 3 4 #"cons"
0 0 4 3 4 #"    "
0 0 18 3 5 #";; op"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 14 3 4 #"seq2"
0 0 4 3 4 #"    "
0 0 18 3 10 #";; initial"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 14 3 4 #"seq1"
0 0 24 3 2 #"))"
0 0 4 3 2 #"  "
0 0 18 3 11 #";; sequence"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 3 #"sum"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #")"
0 0 4 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 5 #"count"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #")"
0 0 4 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 22 3 1 #"1"
0 0 4 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 6 #"length"
0 0 4 3 1 #" "
0 0 16 3 8 #"sequence"
0 0 24 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 24 3 1 #"("
0 0 14 3 10 #"accumulate"
0 0 4 3 1 #" "
0 0 14 3 5 #"count"
0 0 4 3 1 #" "
0 0 22 3 1 #"0"
0 0 4 3 1 #" "
0 0 16 3 8 #"sequence"
0 0 24 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 18 3 16 #";; exercise 2.34"
0 0 4 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 6 #"horner"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 14 3 20 #"coefficient-sequence"
0 0 24 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 24 3 1 #"("
0 0 14 3 10 #"accumulate"
0 0 4 3 1 #" "
0 0 24 3 1 #"("
0 0 16 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 10 #"this-coeff"
0 0 4 3 1 #" "
0 0 14 3 12 #"higher-terms"
0 0 24 3 1 #")"
0 0 4 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 1 #"*"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 14 3 12 #"higher-terms"
0 0 24 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 10 #"this-coeff"
0 0 24 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 14 #"              "
0 0 22 3 1 #"0"
0 0 4 29 1 #"\n"
0 0 4 3 14 #"              "
0 0 14 3 20 #"coefficient-sequence"
0 0 24 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 18 3 16 #";; exercise 2.35"
0 0 4 29 1 #"\n"
0 0 18 3 61
#";Redefine count-leaves from section 2.2.2 as an accumulation:"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 12 #"count-leaves"
0 0 4 3 1 #" "
0 0 14 3 1 #"t"
0 0 24 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 24 3 1 #"("
0 0 14 3 10 #"accumulate"
0 0 4 3 1 #" "
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 18 3 4 #"; op"
0 0 4 29 1 #"\n"
0 0 4 3 14 #"              "
0 0 22 3 1 #"0"
0 0 4 3 1 #" "
0 0 18 3 9 #"; initial"
0 0 4 29 1 #"\n"
0 0 4 3 14 #"              "
0 0 24 3 1 #"("
0 0 14 3 3 #"map"
0 0 4 3 1 #" "
0 0 18 3 44 #"; sequence -- map returns a transformed list"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 24 3 1 #"("
0 0 16 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 7 #"subtree"
0 0 24 3 1 #")"
0 0 4 3 1 #" "
0 0 18 3 5 #";proc"
0 0 4 29 1 #"\n"
0 0 4 3 19 #"                   "
0 0 24 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 5 #"pair?"
0 0 4 3 1 #" "
0 0 14 3 7 #"subtree"
0 0 24 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 23 #"                       "
0 0 24 3 1 #"("
0 0 14 3 12 #"count-leaves"
0 0 4 3 1 #" "
0 0 14 3 7 #"subtree"
0 0 24 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 23 #"                       "
0 0 22 3 1 #"1"
0 0 24 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 14 3 1 #"t"
0 0 24 3 3 #")))"
0 0 4 3 1 #" "
0 0 18 3 6 #";items"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 18 3 16 #";; exercise 2.36"
0 0 4 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 12 #"accumulate-n"
0 0 4 3 1 #" "
0 0 14 3 2 #"op"
0 0 4 3 1 #" "
0 0 14 3 4 #"init"
0 0 4 3 1 #" "
0 0 14 3 4 #"seqs"
0 0 24 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 24 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 5 #"null?"
0 0 4 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 3 #"car"
0 0 4 3 1 #" "
0 0 14 3 4 #"seqs"
0 0 24 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 14 3 3 #"nil"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 24 3 1 #"("
0 0 14 3 4 #"cons"
0 0 4 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 10 #"accumulate"
0 0 4 3 1 #" "
0 0 14 3 2 #"op"
0 0 4 3 1 #" "
0 0 14 3 4 #"init"
0 0 4 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 3 #"map"
0 0 4 3 1 #" "
0 0 14 3 3 #"car"
0 0 4 3 1 #" "
0 0 14 3 4 #"seqs"
0 0 24 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 24 3 1 #"("
0 0 14 3 12 #"accumulate-n"
0 0 4 3 1 #" "
0 0 14 3 2 #"op"
0 0 4 3 1 #" "
0 0 14 3 4 #"init"
0 0 4 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 3 #"map"
0 0 4 3 1 #" "
0 0 14 3 3 #"cdr"
0 0 4 3 1 #" "
0 0 14 3 4 #"seqs"
0 0 24 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 18 3 64
#";; exercise 2.37... matrix algebra... i'll leave that for later."
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 18 3 16 #";; exercise 2.38"
0 0 4 29 1 #"\n"
0 0 18 3 25 #";; fold right, fold left."
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 18 3 1 #";"
0 0 18 3 27 #"; fold right is accumulate."
0 0 4 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 10 #"fold-right"
0 0 4 3 1 #" "
0 0 14 3 10 #"accumulate"
0 0 24 3 1 #")"
0 0 4 29 1 #"\n"
0 0 18 3 21 #";; fold left as given"
0 0 4 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 9 #"fold-left"
0 0 4 3 1 #" "
0 0 14 3 2 #"op"
0 0 4 3 1 #" "
0 0 14 3 7 #"initial"
0 0 4 3 1 #" "
0 0 16 3 8 #"sequence"
0 0 24 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 4 #"iter"
0 0 4 3 1 #" "
0 0 14 3 6 #"result"
0 0 4 3 1 #" "
0 0 14 3 4 #"rest"
0 0 24 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 24 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 5 #"null?"
0 0 4 3 1 #" "
0 0 14 3 4 #"rest"
0 0 24 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 14 3 6 #"result"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 24 3 1 #"("
0 0 14 3 4 #"iter"
0 0 4 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 2 #"op"
0 0 4 3 1 #" "
0 0 14 3 6 #"result"
0 0 4 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 3 #"car"
0 0 4 3 1 #" "
0 0 14 3 4 #"rest"
0 0 24 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 14 #"              "
0 0 24 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 4 3 1 #" "
0 0 14 3 4 #"rest"
0 0 24 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 24 3 1 #"("
0 0 14 3 4 #"iter"
0 0 4 3 1 #" "
0 0 14 3 7 #"initial"
0 0 4 3 1 #" "
0 0 16 3 8 #"sequence"
0 0 24 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 18 3 2 #";>"
0 0 18 3 1 #" "
0 0 18 3 1 #"("
0 0 18 3 10 #"fold-right"
0 0 18 3 1 #" "
0 0 18 3 1 #"/"
0 0 18 3 1 #" "
0 0 18 3 1 #"1"
0 0 18 3 1 #" "
0 0 18 3 1 #"("
0 0 18 3 4 #"list"
0 0 18 3 1 #" "
0 0 18 3 1 #"1"
0 0 18 3 1 #" "
0 0 18 3 1 #"2"
0 0 18 3 1 #" "
0 0 18 3 3 #"3))"
0 0 4 29 1 #"\n"
0 0 18 3 1 #";"
0 6          10 18 4 #"3/2\0"
3 #"#e\0"
6 #"mixed\0"
2 #"1\0"
0 0 4 29 1 #"\n"
0 0 18 3 2 #";>"
0 0 18 3 1 #" "
0 0 18 3 1 #"("
0 0 18 3 9 #"fold-left"
0 0 18 3 1 #" "
0 0 18 3 1 #"/"
0 0 18 3 1 #" "
0 0 18 3 1 #"1"
0 0 18 3 1 #" "
0 0 18 3 1 #"("
0 0 18 3 4 #"list"
0 0 18 3 1 #" "
0 0 18 3 1 #"1"
0 0 18 3 1 #" "
0 0 18 3 1 #"2"
0 0 18 3 1 #" "
0 0 18 3 3 #"3))"
0 0 4 29 1 #"\n"
0 0 18 3 1 #";"
0 6          10 18 4 #"1/6\0"
3 #"#e\0"
6 #"mixed\0"
2 #"1\0"
0 0 4 29 1 #"\n"
0 0 18 3 2 #";>"
0 0 18 3 1 #" "
0 0 18 3 1 #"("
0 0 18 3 10 #"fold-right"
0 0 18 3 1 #" "
0 0 18 3 4 #"list"
0 0 18 3 1 #" "
0 0 18 3 3 #"nil"
0 0 18 3 1 #" "
0 0 18 3 1 #"("
0 0 18 3 4 #"list"
0 0 18 3 1 #" "
0 0 18 3 1 #"1"
0 0 18 3 1 #" "
0 0 18 3 1 #"2"
0 0 18 3 1 #" "
0 0 18 3 3 #"3))"
0 0 4 29 1 #"\n"
0 0 18 3 2 #";{"
0 0 18 3 5 #"mcons"
0 0 18 3 1 #" "
0 0 18 3 1 #"1"
0 0 18 3 1 #" "
0 0 18 3 1 #"{"
0 0 18 3 5 #"mcons"
0 0 18 3 1 #" "
0 0 18 3 1 #"{"
0 0 18 3 5 #"mcons"
0 0 18 3 1 #" "
0 0 18 3 1 #"2"
0 0 18 3 1 #" "
0 0 18 3 1 #"{"
0 0 18 3 5 #"mcons"
0 0 18 3 1 #" "
0 0 18 3 1 #"{"
0 0 18 3 5 #"mcons"
0 0 18 3 1 #" "
0 0 18 3 1 #"3"
0 0 18 3 1 #" "
0 0 18 3 1 #"{"
0 0 18 3 5 #"mcons"
0 0 18 3 1 #" "
0 0 18 3 1 #"'"
0 0 18 3 2 #"()"
0 0 18 3 1 #" "
0 0 18 3 1 #"'"
0 0 18 3 4 #"()}}"
0 0 18 3 1 #" "
0 0 18 3 1 #"'"
0 0 18 3 4 #"()}}"
0 0 18 3 1 #" "
0 0 18 3 5 #"'()}}"
0 0 4 29 1 #"\n"
0 0 18 3 2 #";>"
0 0 18 3 1 #" "
0 0 18 3 1 #"("
0 0 18 3 9 #"fold-left"
0 0 18 3 1 #" "
0 0 18 3 4 #"list"
0 0 18 3 1 #" "
0 0 18 3 3 #"nil"
0 0 18 3 1 #" "
0 0 18 3 1 #"("
0 0 18 3 4 #"list"
0 0 18 3 1 #" "
0 0 18 3 1 #"1"
0 0 18 3 1 #" "
0 0 18 3 1 #"2"
0 0 18 3 1 #" "
0 0 18 3 3 #"3))"
0 0 4 29 1 #"\n"
0 0 18 3 2 #";{"
0 0 18 3 5 #"mcons"
0 0 18 3 1 #" "
0 0 18 3 1 #"{"
0 0 18 3 5 #"mcons"
0 0 18 3 1 #" "
0 0 18 3 1 #"{"
0 0 18 3 5 #"mcons"
0 0 18 3 1 #" "
0 0 18 3 1 #"'"
0 0 18 3 2 #"()"
0 0 18 3 1 #" "
0 0 18 3 1 #"{"
0 0 18 3 5 #"mcons"
0 0 18 3 1 #" "
0 0 18 3 1 #"1"
0 0 18 3 1 #" "
0 0 18 3 1 #"'"
0 0 18 3 4 #"()}}"
0 0 18 3 1 #" "
0 0 18 3 1 #"{"
0 0 18 3 5 #"mcons"
0 0 18 3 1 #" "
0 0 18 3 1 #"2"
0 0 18 3 1 #" "
0 0 18 3 1 #"'"
0 0 18 3 4 #"()}}"
0 0 18 3 1 #" "
0 0 18 3 1 #"{"
0 0 18 3 5 #"mcons"
0 0 18 3 1 #" "
0 0 18 3 1 #"3"
0 0 18 3 1 #" "
0 0 18 3 5 #"'()}}"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 18 3 85
(
 #";commutative operations should produce identical results win fold-ri"
 #"ght and fold-left"
) 0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 18 3 74
(
 #";; exercise 2.39 reverse in terms of accumulate (fold-right) and fol"
 #"d-left"
) 0 0 4 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 9 #"reverse-r"
0 0 4 3 1 #" "
0 0 16 3 8 #"sequence"
0 0 24 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 24 3 1 #"("
0 0 14 3 10 #"fold-right"
0 0 4 3 1 #" "
0 0 24 3 1 #"("
0 0 16 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #")"
0 0 4 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 6 #"append"
0 0 4 3 1 #" "
0 0 14 3 1 #"y"
0 0 4 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 3 #")))"
0 0 4 3 1 #" "
0 0 14 3 3 #"nil"
0 0 4 3 1 #" "
0 0 16 3 8 #"sequence"
0 0 24 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 24 3 1 #"("
0 0 16 3 6 #"define"
0 0 4 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 9 #"reverse-l"
0 0 4 3 1 #" "
0 0 16 3 8 #"sequence"
0 0 24 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 24 3 1 #"("
0 0 14 3 9 #"fold-left"
0 0 4 3 1 #" "
0 0 24 3 1 #"("
0 0 16 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 14 3 1 #"y"
0 0 24 3 1 #")"
0 0 4 3 1 #" "
0 0 24 3 1 #"("
0 0 14 3 4 #"cons"
0 0 4 3 1 #" "
0 0 14 3 1 #"y"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 2 #"))"
0 0 4 3 1 #" "
0 0 14 3 3 #"nil"
0 0 4 3 1 #" "
0 0 16 3 8 #"sequence"
0 0 24 3 2 #"))"
0           0
